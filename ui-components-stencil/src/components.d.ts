/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UiButton {
        "click_callback"?: Function;
        "name": string;
    }
    interface UiInput {
        "change_event"?: Function;
        "field_id"?: string;
        "label"?: string;
        "name": string;
        "placeholder"?: string;
        "value"?: string;
    }
    interface UiLoading {
    }
    interface UiLogin {
        "panel_title": string;
        "submit_event"?: Function;
    }
    interface UiMessageitem {
        "date": Date;
        "highlight"?: boolean;
        "key": string;
        "message": string;
        "user_name": string;
    }
    interface UiMessagelist {
    }
    interface UiPanel {
        "panel_title": string;
        "size"?: string;
    }
    interface UiRow {
    }
    interface UiUseritem {
        "highlight"?: boolean;
        "key": string;
        "user_name": string;
    }
    interface UiUserlist {
    }
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiInputElement extends Components.UiInput, HTMLStencilElement {
    }
    var HTMLUiInputElement: {
        prototype: HTMLUiInputElement;
        new (): HTMLUiInputElement;
    };
    interface HTMLUiLoadingElement extends Components.UiLoading, HTMLStencilElement {
    }
    var HTMLUiLoadingElement: {
        prototype: HTMLUiLoadingElement;
        new (): HTMLUiLoadingElement;
    };
    interface HTMLUiLoginElement extends Components.UiLogin, HTMLStencilElement {
    }
    var HTMLUiLoginElement: {
        prototype: HTMLUiLoginElement;
        new (): HTMLUiLoginElement;
    };
    interface HTMLUiMessageitemElement extends Components.UiMessageitem, HTMLStencilElement {
    }
    var HTMLUiMessageitemElement: {
        prototype: HTMLUiMessageitemElement;
        new (): HTMLUiMessageitemElement;
    };
    interface HTMLUiMessagelistElement extends Components.UiMessagelist, HTMLStencilElement {
    }
    var HTMLUiMessagelistElement: {
        prototype: HTMLUiMessagelistElement;
        new (): HTMLUiMessagelistElement;
    };
    interface HTMLUiPanelElement extends Components.UiPanel, HTMLStencilElement {
    }
    var HTMLUiPanelElement: {
        prototype: HTMLUiPanelElement;
        new (): HTMLUiPanelElement;
    };
    interface HTMLUiRowElement extends Components.UiRow, HTMLStencilElement {
    }
    var HTMLUiRowElement: {
        prototype: HTMLUiRowElement;
        new (): HTMLUiRowElement;
    };
    interface HTMLUiUseritemElement extends Components.UiUseritem, HTMLStencilElement {
    }
    var HTMLUiUseritemElement: {
        prototype: HTMLUiUseritemElement;
        new (): HTMLUiUseritemElement;
    };
    interface HTMLUiUserlistElement extends Components.UiUserlist, HTMLStencilElement {
    }
    var HTMLUiUserlistElement: {
        prototype: HTMLUiUserlistElement;
        new (): HTMLUiUserlistElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-input": HTMLUiInputElement;
        "ui-loading": HTMLUiLoadingElement;
        "ui-login": HTMLUiLoginElement;
        "ui-messageitem": HTMLUiMessageitemElement;
        "ui-messagelist": HTMLUiMessagelistElement;
        "ui-panel": HTMLUiPanelElement;
        "ui-row": HTMLUiRowElement;
        "ui-useritem": HTMLUiUseritemElement;
        "ui-userlist": HTMLUiUserlistElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        "click_callback"?: Function;
        "name"?: string;
    }
    interface UiInput {
        "change_event"?: Function;
        "field_id"?: string;
        "label"?: string;
        "name"?: string;
        "placeholder"?: string;
        "value"?: string;
    }
    interface UiLoading {
    }
    interface UiLogin {
        "panel_title"?: string;
        "submit_event"?: Function;
    }
    interface UiMessageitem {
        "date"?: Date;
        "highlight"?: boolean;
        "key"?: string;
        "message"?: string;
        "user_name"?: string;
    }
    interface UiMessagelist {
    }
    interface UiPanel {
        "panel_title"?: string;
        "size"?: string;
    }
    interface UiRow {
    }
    interface UiUseritem {
        "highlight"?: boolean;
        "key"?: string;
        "user_name"?: string;
    }
    interface UiUserlist {
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-input": UiInput;
        "ui-loading": UiLoading;
        "ui-login": UiLogin;
        "ui-messageitem": UiMessageitem;
        "ui-messagelist": UiMessagelist;
        "ui-panel": UiPanel;
        "ui-row": UiRow;
        "ui-useritem": UiUseritem;
        "ui-userlist": UiUserlist;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-input": LocalJSX.UiInput & JSXBase.HTMLAttributes<HTMLUiInputElement>;
            "ui-loading": LocalJSX.UiLoading & JSXBase.HTMLAttributes<HTMLUiLoadingElement>;
            "ui-login": LocalJSX.UiLogin & JSXBase.HTMLAttributes<HTMLUiLoginElement>;
            "ui-messageitem": LocalJSX.UiMessageitem & JSXBase.HTMLAttributes<HTMLUiMessageitemElement>;
            "ui-messagelist": LocalJSX.UiMessagelist & JSXBase.HTMLAttributes<HTMLUiMessagelistElement>;
            "ui-panel": LocalJSX.UiPanel & JSXBase.HTMLAttributes<HTMLUiPanelElement>;
            "ui-row": LocalJSX.UiRow & JSXBase.HTMLAttributes<HTMLUiRowElement>;
            "ui-useritem": LocalJSX.UiUseritem & JSXBase.HTMLAttributes<HTMLUiUseritemElement>;
            "ui-userlist": LocalJSX.UiUserlist & JSXBase.HTMLAttributes<HTMLUiUserlistElement>;
        }
    }
}
